user                      nginx nginx;
worker_processes          auto;
error_log                 stderr info;
pid                       /var/run/nginx.pid;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

# Include files with config snippets into the root context.
include /etc/nginx/conf.d/*.conf;

events {
    worker_connections    1024;
}

http {
    include               /etc/nginx/mime.types;
    default_type          application/octet-stream;
    charset               utf-8;
    log_format            main '$remote_addr - $remote_user [$time_local] '
                            '"$request" $status  $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';
    access_log            /dev/stdout main;

    # Sendfile copies data between one FD and other from within the kernel,
    # which is more efficient than read() + write(). Default is off.
    sendfile              on;

    # Causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames. Default is 'off'.
    tcp_nopush            on;

    # Activating TCP_NODELAY forces a socket to send the data in its buffer,
    # whatever the packet size. Nginx option tcp_nodelay adds the TCP_NODELAY
    # options when opening a new socket.
    # https://brooker.co.za/blog/2024/05/09/nagle.html
    tcp_nodelay           on;

    # Limits the maximum time during which requests can be processed through
    # one keep-alive connection. After this time is reached, the connection is
    # closed following the subsequent request processing.
    keepalive_time        1h;

    # The first parameter sets a timeout during which a keep-alive client
    # connection will stay open on the server side. The zero value disables
    # keep-alive client connections. The optional second parameter sets a value
    # in the “Keep-Alive: timeout=time” response header field. Two parameters
    # may differ.
    keepalive_timeout     75;

    # Enables the specified protocols. Default is TLSv1 TLSv1.1 TLSv1.2.
    # TIP: If you're not obligated to support ancient clients, remove TLSv1.1.
    ssl_protocols         TLSv1.1 TLSv1.2 TLSv1.3;

    ssl_ciphers           HIGH:!aNULL:!MD5;

    # Specifies that our cipher suits should be preferred over client ciphers.
    # Default is 'off'.
    ssl_prefer_server_ciphers on;

    # Specifies a time during which a client may reuse the session parameters.
    # Default is '5m'.
    ssl_session_timeout 1h;

    # Disable TLS session tickets (they are insecure). Default is 'on'.
    ssl_session_tickets off;

    # Specifies the maximum accepted body size of a client request, as
    # indicated by the request header Content-Length. If the stated content
    # length is greater than this size, then the client receives the HTTP
    # error code 413. Set to 0 to disable. Default is '1m'.
    client_max_body_size  20M;

    # Sets buffer size for reading client request header. For most requests, a
    # buffer of 1K bytes is enough. However, if a request includes long cookies,
    # or comes from a WAP client, it may not fit into 1K. If a request line or
    # a request header field does not fit into this buffer then larger buffers,
    # configured by the large_client_header_buffers directive, are allocated.
    client_header_buffer_size       2k;

    # Sets the maximum number and size of buffers used for reading large client
    # request header. A request line cannot exceed the size of one buffer, or
    # the 414 (Request-URI Too Large) error is returned to the client. A request
    # header field cannot exceed the size of one buffer as well, or the 400 (Bad Request)
    # error is returned to the client. Buffers are allocated only on demand. By default,
    # the buffer size is equal to 8K bytes. If after the end of request processing a
    # connection is transitioned into the keep-alive state, these buffers are released.
    large_client_header_buffers     8 16k;

    # Helper variable for proxying websockets.
    map $http_upgrade $connection_upgrade {
            default upgrade;
            '' close;
    }

    # Don't tell nginx version to the clients. Default is 'on'.
    server_tokens         off;

    # Don't send `Server` header at all, which would reveal we're using "nginx"
    more_clear_headers    Server;

    brotli                on;
    brotli_comp_level     6;
    brotli_static         on;
    brotli_types          application/atom+xml application/javascript application/json application/rss+xml
                            application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype
                            application/x-font-ttf application/x-javascript application/xhtml+xml application/xml
                            font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon
                            image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml;

    gzip                  on;
    gzip_http_version     1.0;
    gzip_comp_level       2;
    gzip_proxied          any;
    gzip_vary             on;
    gzip_types            application/atom+xml application/javascript application/json application/rss+xml
                            application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype
                            application/x-font-ttf application/x-javascript application/xhtml+xml application/xml
                            font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon
                            image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml;

    include               /etc/nginx/http.d/*.conf;
}
